name: Submit to Search Engines windows
on:
  schedule:
    - cron: '0 12 * * *'  # Runs daily at 12:00 UTC
  workflow_dispatch:  # Allow manual triggering

jobs:
  submit:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install drissionpage requests beautifulsoup4 python-dotenv lxml google-api-python-client google-auth-httplib2 google-auth-oauthlib gzip-reader
      
      - name: Create directories for logs and reports
        run: |
          mkdir logs
          mkdir reports
          
      - name: Verify subscription status
        id: verify_subscription
        env:
          LICENSE_KEY: ${{ secrets.LICENSE_KEY || '' }}
        shell: pwsh
        run: |
          try {
            $status = python -c "from subscription_verifier import SubscriptionVerifier; verifier = SubscriptionVerifier(); status = verifier.verify_license(); print('License status:', status['valid'], '\nPlan:', status['plan'])"
          } catch {
            Write-Host "Running in free mode"
          }
        continue-on-error: true
      
      - name: Fetch domains from providers
        id: fetch_domains
        env:
          # Cloudflare credentials
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          # Namecheap credentials
          NAMECHEAP_API_KEY: ${{ secrets.NAMECHEAP_API_KEY || '' }}
          NAMECHEAP_USERNAME: ${{ secrets.NAMECHEAP_USERNAME || '' }}
          # GoDaddy credentials
          GODADDY_API_KEY: ${{ secrets.GODADDY_API_KEY || '' }}
          GODADDY_API_SECRET: ${{ secrets.GODADDY_API_SECRET || '' }}
          # General settings
          MAX_URLS_PER_RUN: ${{ secrets.MAX_URLS_PER_RUN || '100' }}
          REQUEST_DELAY: ${{ secrets.REQUEST_DELAY || '15' }}
          DRISSIONPAGE_TIMEOUT: ${{ secrets.DRISSIONPAGE_TIMEOUT || '30' }}
          LICENSE_KEY: ${{ secrets.LICENSE_KEY || '' }}
        shell: pwsh
        run: |
          # Fetch domains from Cloudflare
          python cloudflare_fetcher.py

          # Fetch domains from Namecheap if credentials are provided
          if ($env:NAMECHEAP_API_KEY -and $env:NAMECHEAP_USERNAME) {
            Write-Host "Fetching domains from Namecheap..."
            try {
              python -c "from namecheap_fetcher import NamecheapDomainFetcher; NamecheapDomainFetcher().get_domains()"
            } catch {
              Write-Host "Namecheap fetching failed"
            }
          }

          # Fetch domains from GoDaddy if credentials are provided
          if ($env:GODADDY_API_KEY -and $env:GODADDY_API_SECRET) {
            Write-Host "Fetching domains from GoDaddy..."
            try {
              python -c "from godaddy_fetcher import GoDaddyDomainFetcher; GoDaddyDomainFetcher().get_domains()"
            } catch {
              Write-Host "GoDaddy fetching failed"
            }
          }

          Write-Host "Domain fetching completed. Logging results to logs/domain_fetch.log"
          $date = Get-Date -Format yyyyMMdd
          if (Test-Path domains.txt) { Copy-Item domains.txt "logs/domains_$date.txt" -ErrorAction SilentlyContinue }
        continue-on-error: true
        
      - name: Parse sitemaps for URLs
        id: parse_sitemaps
        env:
          MAX_URLS_PER_RUN: ${{ secrets.MAX_URLS_PER_RUN || '100' }}
          REQUEST_DELAY: ${{ secrets.REQUEST_DELAY || '2' }}
          LICENSE_KEY: ${{ secrets.LICENSE_KEY || '' }}
        shell: pwsh
        run: |
          python sitemap_parser.py
          Write-Host "Sitemap parsing completed. Logging results to logs/sitemap_parse.log"
          $date = Get-Date -Format yyyyMMdd
          if (Test-Path urls.txt) { Copy-Item urls.txt "logs/urls_$date.txt" -ErrorAction SilentlyContinue }
        continue-on-error: true
        
      - name: Submit URLs to Search Engines
        id: submit_urls
        env:
          # General settings
          REQUEST_DELAY: ${{ secrets.REQUEST_DELAY || '5' }}
          GOOGLE_SEARCH_LIMIT: ${{ secrets.GOOGLE_SEARCH_LIMIT || '10' }}
          DRISSIONPAGE_TIMEOUT: ${{ secrets.DRISSIONPAGE_TIMEOUT || '30' }}
          # Search engine API keys
          BING_API_KEY: ${{ secrets.BING_API_KEY || '' }}
          YANDEX_API_KEY: ${{ secrets.YANDEX_API_KEY || '' }}
          # Google Search Console credentials
          GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY || '' }}
          GOOGLE_SERVICE_ACCOUNT_CLIENT_EMAIL: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_CLIENT_EMAIL || '' }}
          # License key for premium features
          LICENSE_KEY: ${{ secrets.LICENSE_KEY || '' }}
        shell: pwsh
        run: |
          # Submit URLs to Google
          python submit_to_google.py
          
          # Submit URLs to Bing if API key is provided
          if ($env:BING_API_KEY) {
            Write-Host "Submitting URLs to Bing..."
            try {
              python -c "from bing_search_console import BingWebmasterTools; import urllib.parse; urls = Get-Content urls.txt; if ($urls) { $first_url = $urls[0]; $parsed_url = [System.Uri]$first_url; $site_url = $($parsed_url.Scheme + '://' + $parsed_url.Host); BingWebmasterTools().batch_submit_urls($site_url, $urls) }"
            } catch {
              Write-Host "Bing submission failed"
            }
          }
          
          # Submit URLs to Yandex if API key is provided
          if ($env:YANDEX_API_KEY) {
            Write-Host "Submitting URLs to Yandex..."
            try {
              python -c "from yandex_search_console import YandexWebmasterTools; yandex = YandexWebmasterTools(); $sites = yandex.get_sites(); if ($sites) { $host_id = $sites[0].get('host_id'); yandex.batch_submit_urls($host_id, (Get-Content urls.txt)) }"
            } catch {
              Write-Host "Yandex submission failed"
            }
          }
          
          Write-Host "URL submission completed. Logging results to logs/"
          $date = Get-Date -Format yyyyMMdd
          if (Test-Path submission_log_*.txt) { Copy-Item submission_log_*.txt "logs/submission_log_$date.txt" -ErrorAction SilentlyContinue }
        continue-on-error: true
        
      - name: Upload logs and results
        uses: actions/upload-artifact@v4
        with:
          name: submission-logs-${{ github.run_id }}
          path: |
            domains.txt
            domains.json
            urls.txt
            index_database.json
            submission_log_*.txt
            logs/*.log
            reports/*.json
          retention-days: 30
          if-no-files-found: warn
      
      - name: Cache domains, URLs, sitemaps, and index database
        id: cache-data
        uses: actions/cache@v3
        with:
          path: |
            domains.txt
            urls.txt
            index_database.json
            sitemaps/
          key: ${{ runner.os }}-data-${{ hashFiles('domains.txt', 'urls.txt', 'index_database.json', 'sitemaps/**') }}
          restore-keys: |
            ${{ runner.os }}-data-
